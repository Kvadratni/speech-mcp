FROM debian:bullseye-slim

# Set environment variables
ENV NODE_VERSION=22.x
ENV PYTHON_VERSION=3.10
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_TLS_REJECT_UNAUTHORIZED=0
ENV NPM_CONFIG_REGISTRY=https://npm.pkg.github.com/
ENV NPM_CONFIG_STRICT_SSL=false
ENV NPM_CONFIG_FETCH_RETRIES=5
ENV NPM_CONFIG_FETCH_RETRY_MINTIMEOUT=60000
ENV NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT=120000

# Initial setup and system dependencies
RUN (groupadd -r service-user) && \
    (useradd -u 1987 -r -m -g service-user service-user) && \
    (mkdir -p /home/service-user/.local/bin /app) && \
    (chown -R service-user:service-user /home/service-user /app) && \
    (apt-get update) && \
    (apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        wget \
        software-properties-common \
        libssl-dev \
        zlib1g-dev \
        git \
        # Audio and Qt dependencies
        portaudio19-dev \
        python3-pyaudio \
        ffmpeg \
        libqt5gui5 \
        libqt5core5a \
        libqt5widgets5 \
        libqt5multimedia5 \
        libasound2-dev \
        pkg-config) && \
    (rm -rf /var/lib/apt/lists/*)

# Install Node.js and configure npm
RUN (curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | bash -) && \
    (apt-get install -y nodejs) && \
    (apt-get clean) && \
    (npm config set registry ${NPM_CONFIG_REGISTRY}) && \
    (npm config set strict-ssl false) && \
    (npm config set fetch-retries ${NPM_CONFIG_FETCH_RETRIES}) && \
    (npm config set fetch-retry-mintimeout ${NPM_CONFIG_FETCH_RETRY_MINTIMEOUT}) && \
    (npm config set fetch-retry-maxtimeout ${NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT}) && \
    (npm config set @block:registry https://npm.pkg.github.com/) && \
    (npm config set //npm.pkg.github.com/:_authToken=${GITHUB_TOKEN})

# Install global npm packages one at a time
RUN npm install -g @block/mcp-proxy@2.10.6
RUN npm install -g pnpm@9.15.5 --registry https://registry.npmjs.org/
RUN npm install -g bun@1.1.42 --registry https://registry.npmjs.org/

# Install Python using uv
RUN (curl -LsSf https://astral.sh/uv/install.sh | UV_INSTALL_DIR="/usr/local/bin" sh) && \
    (uv python install ${PYTHON_VERSION} --default --preview) && \
    (ln -s $(uv python find) /usr/local/bin/python) && \
    (python --version)

# Final cleanup
RUN (apt-get clean) && \
    (rm -rf /var/lib/apt/lists/*) && \
    (rm -rf /tmp/*) && \
    (rm -rf /var/tmp/*)

# Setup Python for service user
RUN su - service-user -c "uv python install ${PYTHON_VERSION} --default --preview && python --version"

# Set working directory
WORKDIR /app

# Switch to service user
USER service-user